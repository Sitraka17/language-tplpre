# Alexander Danylchenko
# BMC tplpre\tpl syntax file highligh.
# 2017-08-14 - Latest version.
# Based on sublime-suntax.
'scopeName': 'source.tplpre'
'name': 'Tplpre'
'fileTypes': [
  'tplpre'
  'tpl'
]
'firstLineMatch': '.*'
'patterns': [
  # Includes
  # Initial
  { 'include': '#percent_line' }
  { 'include': '#doc_strings' }
  { 'include': '#comment_TODO_line' }
  { 'include': '#comment_line' }
  { 'include': '#metadata_2' }
  { 'include': '#overwiev' }
  { 'include': '#simple_identifiers' }
  { 'include': '#if_addm' }
# tpl $$TPLVERSION$$ module NAME;
  {
    'match': 'tpl\\s+(\\$\\$TPLVERSION\\$\\$|\\d+\\.\\d+)\\s+module\\s(.*);'
    'captures':
        1: 'name': 'constant.character.tplpre'
        2: 'name': 'constant.character.tplpre'
  }
# pattern import section
  {
    'match': 'from\\s(\\w+)(?:\.(\\w+))?(?:\.(\\w+))?\\simport\\s(\\S+)\\s(\\d+(?:\.\\d+)+);'
    'captures':
        1: 'name': 'entity.name.function.tplpre'
        2: 'name': 'storage.type.tplpre'
        3: 'name': 'variable.parameter.tplpre'
        4: 'name': 'entity.name.function.tplpre'
        5: 'name': 'constant.numeric.tplpre'
  }
# Highlight configuration sections
  {
    'begin': '^(configuration)\\s(\\S+)\\s(\\d+\\.\\d+)'
    'beginCaptures':
        1: 'name': 'keyword.control.tplpre'
        2: 'name': 'entity.name.function.tplpre'
        3: 'name': 'constant.numeric.tplpre'
    'end': '^(end\\sconfiguration;)'
    'endCaptures':
        1: 'name': 'keyword.control.tplpre'
    # 'name': 'meta.class.old-style.python'
    'patterns': [
      { 'include': '#comment_line' }
      { 'include': '#doc_strings' }
      { 'include': '#lines' }
      { 'include': '#if_addm' }
    ]
  }
# Highlight table sections
  {
    'begin': '^(table)\\s(\\S+)\\s(\\d+(?:\\.\\d+)+)'
    'beginCaptures':
        1: 'name': 'keyword.control.tplpre'
        2: 'name': 'entity.name.function'
        3: 'name': 'constant.numeric.tplpre'
        4: 'name': 'comment.block.documentation.tplpre'
    # 'contentName': 'comment.block.documentation.tplpre'
    'end': '^(end\\stable;)'
    'endCaptures':
        1: 'name': 'keyword.control.tplpre'
    # 'name': 'meta.class.old-style.python'
    'patterns': [
      { 'include': '#comment_line' }
      { 'include': '#main' }
    ]
  }
# Highlight definitions sections
  {
    'comment': 'Adding SQL support via #lines'
    'begin': '^(definitions)\\s(\\S+)\\s(\\d+(?:\\.\\d+)+)'
    'beginCaptures':
        1: 'name': 'keyword.control.tplpre'
        2: 'name': 'entity.name.function'
        3: 'name': 'constant.numeric.tplpre'
    # 'contentName': 'comment.block.documentation.tplpre'
    'end': '^(end\\sdefinitions;)'
    'endCaptures':
        1: 'name': 'keyword.control.tplpre'
    # 'name': 'meta.class.old-style.python'
    'patterns': [
      { 'include': '#comment_line' }
      { 'include': '#doc_strings' }
      { 'include': '#define' }
      { 'include': '#alt_define' }
      { 'include': '#lines' }
      { 'include': '#if_addm' }
    ]
  }
# Highlight pattern sections
  {
    'begin': '^\\b(pattern)\\s+(\\w+)\\s(\\d+(?:\\.\\d+)+)\\s+$'
    'beginCaptures':
        1: 'name': 'keyword.control.tplpre'
        2: 'name': 'constant.numeric.tplpre'
    # 'contentName': 'comment.block.documentation.tplpre'
    'end': '\\b(end\\spattern;)'
    'endCaptures':
        1: 'name': 'keyword.control.tplpre'
    # 'name': 'meta.class.old-style.python'
    'patterns': [
        { 'include': "#comment_TODO_line" }
        { 'include': "#comment_line" }
        { 'include': "#doc_strings" }
        { 'include': "#metadata" }
        { 'include': "#overwiev" }
        { 'include': "#constants" }
        { 'include': "#triggers" }
        { 'include': "#removal" }
        { 'include': "#body" }
        { 'include': "#if_addm" }
        { 'include': '#docstrings' }
        { 'include': '#doc_strings_block_doulbe_q' }
    ]
  }
]
# Repository
'repository':
# Small blocks:
  'tags':
    'comment': 'Tags'
    'match': 'tags'
    'name': 'keyword.control.import.tplpre'
  'tags_TKU':
    'comment': 'Tags TKU'
    'match': '(TKU_\\d+_\\d+_\\d+)'
    'name': 'constant.other.tplpre'
  'metadata': # Highlight metadata sections
    'begin': '^\\s{4}(metadata)\\s+?$'
    'beginCaptures':
      1: 'name': 'keyword.control.tplpre'
    'end': '^\\s{4}(end\\smetadata;)\\s+?$'
    'endCaptures':
      1: 'name': 'keyword.control.tplpre'
    'patterns': [
        { 'include': "#comment_line" }
        { 'include': "#lines" }
        { 'include': "#if_addm" }
    ]
  'metadata_2':
    'begin': '^(metadata)\\s+?$'
    'beginCaptures':
      1: 'name': 'keyword.control.tplpre'
    'end': '^(end\\smetadata;)\\s+?$'
    'endCaptures':
      1: 'name': 'keyword.control.tplpre'
    'patterns': [
        { 'include': "#comment_line" }
        { 'include': "#lines" }
        { 'include': "#if_addm" }
    ]
# Highlight overview sections
  'overwiev':
    'begin': '^\\s{4}(overview)\\s+?$'
    'beginCaptures':
      1: 'name': 'keyword.control.tplpre'
    'end': '^\\s{4}(end\\soverview;)\\s+?$'
    'endCaptures':
      1: 'name': 'keyword.control.tplpre'
    'patterns': [
        { 'include': "#comment_line" }
        { 'include': "#tags_TKU" }
        { 'include': "#keywords_all" }
        { 'include': "#if_addm" }
    ]
# Highlight constants sections
  'constants':
    'begin': '\\b(constants)\\s+?$'
    'beginCaptures':
      1: 'name': 'keyword.control.tplpre'
    'end': '\\b(end\\sconstants;)\\s+?$'
    'endCaptures':
      1: 'name': 'keyword.control.tplpre'
    'patterns': [
        { 'include': "#lines" }
        { 'include': "#all_functions" }
        { 'include': "#if_addm" }
    ]
# Highlight trigger sections
  'triggers':
    'begin': '^\\s{4}(triggers)\\s+?$'
    'beginCaptures':
      1: 'name': 'keyword.control.tplpre'
    'end': '^\\s{4}(end\\striggers;)\\s+?$'
    'endCaptures':
      1: 'name': 'keyword.control.tplpre'
    'patterns': [
        { 'include': "#lines" }
        { 'include': "#all_functions" }
        { 'include': "#all_controls" }
        { 'include': "#keywords_cmd_indentify_trigger" }
        { 'include': "#if_addm" }
    ]
# Highlight body sections
  'body':
    'begin': '^\\s{4}(body)$'
    'beginCaptures':
      1: 'name': 'keyword.control.tplpre'
    'end': '^\\s{4}(end\\sbody;)$'
    'endCaptures':
      1: 'name': 'keyword.control.tplpre'
    'patterns': [
        { 'include': "#dev_keys" }
        { 'include': "#doc_strings" }
        { 'include': "#lines" }
        { 'include': "#all_functions" }
        { 'include': "#all_controls" }
        { 'include': "#if_addm" }
    ]
# Highlight removal sections
  'removal':
    'begin': '^\\s{4}(removal)'
    'beginCaptures':
      1: 'name': 'keyword.control.tplpre'
    'end': '^\\s{4}(end\\sremoval;)'
    'endCaptures':
      1: 'name': 'keyword.control.tplpre'
    'patterns': [
        { 'include': "#lines" }
        { 'include': "#all_functions" }
        { 'include': "#all_controls" }
        { 'include': "#if_addm" }
    ]
# Lines and comments and quotes:
  # // THIS LINE
  'comment_line':
    'name': 'comment.line.tplpre'
    'match': '//.*'
  'comment_TODO_line':
    'comment': "variable.parameter.tplpre"
    'begin': "(//)\\s?(TO(\\s+|)DO\\:)"
    'beginCaptures':
      1: 'name': "comment.line.tplpre"
      2: 'name': "keyword.control.tplpre"
    'end': '(.*)'
    'endCaptures':
      1: 'name': "variable.parameter.function.tplpre"
  # %THIS LINE%
  'percent_line':
    'comment': "There is one experimental regex now used. Old one is commented."
    'match': "(\\%((?:[^\\%]|\\\\\\\\|\\\\%)*)\\%)"
    'name': "keyword.control.tplpre"
    'captures':
      1: 'name': "keyword.control.tplpre"
      2: 'name': "string.quoted.single.tplpre"
# 'THIS LINE'
  'qouted_line':
    'match': '(\\\"((?:[^\\\"]|\\\\\\\\|\\\\\")*)\\\")'
    'comment': 'There is one experimental regex now used. Old one is commented. Add Begin trigger to include SQL support'
    'captures':
      1: 'name': 'keyword.control.tplpre'
      2: 'name': 'string.quoted.single.tplpre'
    'patterns': [
        { 'include': "#sql_query" }
    ]
  # "THIS LINE"
  'double_qouted_line':
    'match': '(\\\"((?:[^\\\"]|\\\\\\\\|\\\\\")*)\\\")'
    'comment': 'There is one experimental regex now used. Old one is commented. Add Begin trigger to include SQL support'
    'captures':
      1: 'name': 'keyword.control.tplpre'
      2: 'name': 'string.quoted.single.tplpre'
    'patterns': [
        { 'include': "#sql_query" }
    ]
  # [THIS]
  'square_brackets_line_word':
    'match': '\\[(\\w+[^\\d+])\\]'
    'captures':
      1: 'name': 'variable.parameter.tplpre'
  # [9]
  'square_brackets_line_int':
    'match': '\\[(-?\\d+)\\]'
    'captures':
        1: 'name': 'constant.numeric.tplpre'
  'drdc_jira':
    'match': "\\((DRDC1-\\S+)\\)"
    # 'name': "variable.parameter.tplpre"
    'captures':
        1: 'name': "variable.other.tplpre"
  'sql_query':
    'begin': '(?="""(SELECT|INSERT|UPDATE|DELETE|CREATE|REPLACE|ALTER|WITH))'
    'end': '(?=""";)'
    'patterns': [
          {
            'include': 'source.sql'
          }
        ]
  # All lines
  'lines':
    'patterns': [
      { 'include': '#sql_query' }
      { 'include': '#percent_line' }
      { 'include': '#comment_TODO_line' }
      { 'include': '#comment_line' }
      { 'include': '#qouted_line' }
      { 'include': '#double_qouted_line' }
      { 'include': '#regexes' }
      { 'include': '#square_brackets_line_word' }
      { 'include': '#square_brackets_line_int' }
      { 'include': '#all_keys' }
      { 'include': '#drdc_jira' }
    ]
# Keys
  # plus +
  'plus':
    'match': '\\+'
    'name': 'keyword.operator.assignment.tplpre'
  # var :=
  'var_assign':
    'match': '\\:\\='
    'name': 'keyword.operator.assignment.tplpre'
  # var := ""
  'double_q':
    'match': '(\\\"\\\"){1}'
    'name': 'comment.tplpre'
  # var := ''
  'single_q':
    'match': "(\\'\\'){1}"
    'name': 'comment.tplpre'
  # var1 = var2
  'equal':
    'match': "\\="
    'name': 'keyword.operator.assignment.tplpre'
  # var1 < var2
  'less':
    'match': "\\<\\="
    'name': 'keyword.operator.tplpre'
  # var2 > var1
  'more':
    'match': "\\>"
    'name': 'keyword.operator.tplpre'
  # var2 >= var1
  'more_equal':
    'match': "\\>\\="
    'name': 'keyword.operator.tplpre'
  # var1 <= var2
  'less_equal':
    'match': "\\<\\="
    'name': 'keyword.operator.tplpre'
  # 5 - currenly can't work
  'decimal':
    'match': "\\s\\-\\d+\\s"
    'name': 'constant.numeric.integer.tplpre'
  # -5 - currenly can't work
  'minus_decimal':
    'match': "\\s\\-\\d+\\s"
    'name': 'constant.numeric.integer.tplpre'
  # just dot "."
  'just_do':
    'match': "(\\.)"
    'name': 'punctuation.accessor.tplpre'
    'captures':
      1: 'name': 'keyword.operator.tplpre'
  'all_keys':
    'patterns': [
      { 'include': '#var_assign' }
      { 'include': '#equal' }
      { 'include': '#less' }
      { 'include': '#more' }
      { 'include': '#more_equal' }
      { 'include': '#less_equal' }
      { 'include': '#plus' }
      { 'include': '#decimal' }
      { 'include': '#minus_decimal' }
      { 'include': '#just_do' }
    ]
# Regex functions:
  'regex':
    'match': '\\b(regex)\\s+'
    'name': 'regex.tplpre'
    'captures':
      1: 'name': 'keyword.control.tplpre'
  'regex_2_lines':
    'match': '(regex)'
    'name': 'regex.tplpre'
    'captures':
      1: 'name': 'keyword.control.tplpre'
  'regex_raw':
    'match': "\\b(raw)\\s+('|\")(\\\\\\d+)('|\")"
    'captures':
      1: 'name': 'keyword.control.tplpre'
      3: 'name': 'variable.parameter.tplpre'
  'content_raw':
    'match': "\\s\\b(raw)\\s+"
    'captures':
      1: 'name': 'keyword.control.tplpre'
  'regexes':
    'patterns': [
      {'include': '#regex_raw'}
      {'include': '#regex'}
      {'include': '#content_raw'}
    ]
# BuiltIN tplre functions:
# Later some checks can be added
  # Discovery mark
  'discovery_functions':
    # name: discovery.function.tplpre
    'comment': 'Discovery functions DEV looks working'
    'begin': "(discovery)(\\.)(fileGet|fileInfo|getNames|listDirectory|listRegistry|registryKey|wmiQuery|wbemQuery|wbemEnumInstances|runCommand|snmpGet|snmpGetTable|restfulGet|restfulPost|vSphereFindObjects|vSphereTraverseToObjects|vSphereGetProperties|vSphereGetPropertyTable)"
    'beginCaptures':
      1: 'name': 'support.function.tplpre'
      2: 'name': 'punctuation.accessor.tplpre'
      3: 'name': 'support.constant.tplpre'
    'end': "\\;"
    # 'contentName': "comment.block.documentation.tplpre"
    'endCaptures':
      1: 'name': "disabled.tplpre"
     'patterns': [
        { 'include': '#lines' }
        { 'include': '#all_controls' }
        { 'include': '#regex' }
      ]
# model functions
  'model_functions':
    # name: discovery.function.tplpre
    'comment': 'Model functions DEV looks working'
    'begin': "((model)(\\.)(addContainment|setContainment|destroy|withdraw|setRemovalGroup|anchorRemovalGroup|suppressRemovalGroup|host|hosts|findPackages|addDisplayAttribute|removeDisplayAttribute|kind))"
    'beginCaptures':
      1: 'name': 'entity.name.function.tplpre'
      2: 'name': 'support.function.tplpre'
      3: 'name': 'punctuation.accessor.tplpre'
      4: 'name': 'support.constant.tplpre'
    'end': "\\;"
    # 'contentName': "comment.block.documentation.tplpre"
    'endCaptures':
      1: 'name': "disabled.tplpre"
     'patterns': [
        { 'include': '#lines' }
        { 'include': '#all_controls' }
        { 'include': '#regex' }
      ]
# model rel functions
  'model_rel_functions':
    # name: discovery.function.tplpre
    'comment': 'Model rel functions DEV looks working'
    'begin': "((model)(\\.)(rel|uniquerel)(\\.)(Communication|Containment|Dependency|Detail|HostContainment|HostedFile|HostedSoftware|Management|RelatedFile|SoftwareService|SoftwareContainment|StorageUse))"
    'beginCaptures':
      1: 'name': 'entity.name.function.tplpre'
      2: 'name': 'support.function.tplpre'
      3: 'name': 'punctuation.accessor.tplpre'
      4: 'name': 'support.constant.tplpre'
    'end': "\\;"
    # 'contentName': "comment.block.documentation.tplpre"
    'endCaptures':
      1: 'name': "disabled.tplpre"
     'patterns': [
        { 'include': '#lines' }
        { 'include': '#all_controls' }
        { 'include': '#regex' }
      ]
# model SI functions
  'model_SI_functions':
    # name: discovery.function.tplpre
    'comment': 'Model SI functions DEV looks working. TODO: upgrage to highlight inr content 2017-08-15'
    'begin': "((model)(\\.)(SoftwareInstance))"
    'beginCaptures':
      1: 'name': 'entity.name.function.tplpre'
      2: 'name': 'support.function.tplpre'
      3: 'name': 'punctuation.accessor.tplpre'
      4: 'name': 'support.constant.tplpre'
    'end': "\\;"
    # 'contentName': "comment.block.documentation.tplpre"
    'endCaptures':
      1: 'name': "disabled.tplpre"
     'patterns': [
        { 'include': '#lines' }
        { 'include': '#all_controls' }
        { 'include': '#regex' }
      ]
# Log functions: log.debug("Blah")
  'log_functions':
    'match': '(log\\.(?:debug|info|warn|error|critical))'
    'captures':
        1: 'name': 'storage.type.tplpre'
# Text functions: text.toNumber(text)
  'number_functions':
    'match': "(text)(\\.)(lower|upper|toNumber|replace|join|split|strip|leftStrip|rightStrip|hash|ordinal)"
    'captures':
        1: 'name': 'support.function.tplpre'
        2: 'name': 'punctuation.accessor.tplpre'
        3: 'name': 'support.constant.tplpre'
# Regex functions
  'regex_functions':
    # name: regex.function.tplpre
    'match': "(regex)(\\.)(extract|extractAll)"
    'captures':
      1: 'name': 'keyword.control.tplpre'
      2: 'name': 'punctuation.accessor.tplpre'
      3: 'name': 'variable.parameter.tplpre'
# Xpath functions
  'xpath_functions':
    # name: xpath.function.tplpre
    'match': "(xpath)(\\.)(evaluate|openDocument|closeDocument)"
    'captures':
      1: 'name': 'keyword.control.tplpre'
      2: 'name': 'punctuation.accessor.tplpre'
      3: 'name': 'variable.parameter.tplpre'
# Discovery results functions:
  'discovery_manipulation_functions':
    # name: discovery.function.tplpre
    'match': "(discovery)(\\.)(process|children|descendents|parent|allProcesses|access)"
    'captures':
      1: 'name': 'support.function.tplpre'
      2: 'name': 'punctuation.accessor.tplpre'
      3: 'name': 'support.constant.tplpre'
# Binary NETW convertion functions
  'binary_functions':
    # name: binary.function.tplpre
    'match': "(binary)(\\.)(toHexString|toIPv4|toIPv4z|toIPv6|toIPv6z|toMACAddress|toValue|toWWN)"
    'captures':
      1: 'name': 'support.function.tplpre'
      2: 'name': 'punctuation.accessor.tplpre'
      3: 'name': 'support.constant.tplpre'
# JSON Functions
  'json_functions':
    # name: binary.function.tplpre
    'match': "(json)(\\.)(encode|decode)"
    'captures':
      1: 'name': 'keyword.control.tplpre'
      2: 'name': 'punctuation.accessor.tplpre'
      3: 'name': 'variable.parameter.tplpre'
# Related functions
  'related_functions':
    # name: time.function.tplpre
    'match': "(related)(\\.)(detailContainer|host\\b|hostingNode)"
    'captures':
      1: 'name': 'support.function.tplpre'
      2: 'name': 'punctuation.accessor.tplpre'
      3: 'name': 'support.constant.tplpre'
# Mail functions (old)
  'mail_functions':
    # name: mail.function.tplpre
    'match': "(mail)(\\.)(send)"
    'captures':
      1: 'name': 'keyword.control.tplpre'
      2: 'name': 'punctuation.accessor.tplpre'
      3: 'name': 'variable.parameter.tplpre'
# Time functions
  'time_functions':
    # name: time.function.tplpre
    'match': "(time)(\\.)(current|delta|parseLocal|parseUTC|formatLocal|formatUTC|toTicks|fromTicks)"
    'captures':
      1: 'name': 'keyword.control.tplpre'
      2: 'name': 'punctuation.accessor.tplpre'
      3: 'name': 'variable.parameter.tplpre'
# Inferrence functions
  'inference_functions':
    # name: inference.function.tplpre
    'match': "(inference)(\\.)(associate|contributor|primary|relation|withdrawal|destruction)"
    'captures':
      1: 'name': 'support.function.tplpre'
      2: 'name': 'punctuation.accessor.tplpre'
      3: 'name': 'support.constant.tplpre'
# Conversion functions (SupportingFiles - > pattern):
  'ConversionFunctions':
    # name: ConversionFunctions.function.tplpre
    'match': "(ConversionFunctions)(\\.)(isValidSerialNumber|convertToCharString|convertToBytes)"
    'captures':
      1: 'name': 'entity.name.function.tplpre'
      2: 'name': 'punctuation.accessor.tplpre'
      3: 'name': 'entity.name.function.tplpre'
# Discovery functions (SupportingFiles - > pattern):
  'DiscoveryFunctions':
    # name: DiscoveryFunctions.function.tplpre
    'match': "(DiscoveryFunctions)(\\.)(pathNormalization|getCleanedupPath|getMaxVersion|getExeCwdPath|sortList|runActiveCommand|locateCommands|checkCommandList)"
    'captures':
      1: 'name': 'entity.name.function.tplpre'
      2: 'name': 'punctuation.accessor.tplpre'
      3: 'name': 'entity.name.function.tplpre'
# RDBMSFunctions functions (SupportingFiles - > pattern):
  'RDBMSFunctions':
    # name: RDBMSFunctions.function.tplpre
    'match': "(RDBMSFunctions)(\\.)(oracleOraFileParser|performRdbmsSisSearch|oracleNetServiceNameSearch|dsnRdbmsServers|parseJDBC)"
    'captures':
      1: 'name': 'entity.name.function.tplpre'
      2: 'name': 'punctuation.accessor.tplpre'
      3: 'name': 'entity.name.function.tplpre'
# rdbms_functions functions (SupportingFiles - > pattern OLD):
  'rdbms_functions':
    # name: rdbms_functions.function.tplpre
    'match': "(rdbms_functions)(\\.)(oracle_ora_file_parser|perform_rdbms_sis_search|related_rdbms_sis_search|related_rdbms_sis_search_extended|oracle_net_service_name_search|dsn_rdbms_servers|parseJDBC|jdbc_search|find_db_server)"
    'captures':
      1: 'name': 'entity.name.function.tplpre'
      2: 'name': 'punctuation.accessor.tplpre'
      3: 'name': 'entity.name.function.tplpre'
# SearchFunctions functions (SupportingFiles - > pattern):
  'SearchFunctions':
    # name: SearchFunctions.function.tplpre
    'match': "(SearchFunctions)(\\.)(getNodeIp|getHostingNodes|getSoftwareNodes|getSI|identifyHostWithUuid|relatedSisSearchOnMultipleHosts)"
    'captures':
      1: 'name': 'entity.name.function.tplpre'
      2: 'name': 'punctuation.accessor.tplpre'
      3: 'name': 'entity.name.function.tplpre'
# common_functions functions (SupportingFiles - > pattern OLD):
  'common_functions':
    # name: common_functions.function.tplpre
    'match': "(functions)(\\.)(validate_host_address_format|domain_lookup|identify_host_perform_search|identify_host_perform_search_in_scope|identify_host|identify_host_extended|related_sis_search\\b|related_sis_search_on_multiple_hosts|related_sis_search_on_multiple_hosts_extended|related_sis_search_extended|related_si_types_search|path_normalization|links_management|get_cleanedup_path|get_max_version|get_exe_cwd_path|sort_list|run_priv_cmd|has_process|isValidSerialNumber|convertToCharString|wmiFollowAssociations|checkForDecimal|convertToBytes|identify_host_with_uuid|locateCommands|find_server|checkCommandList)"
    'captures':
      1: 'name': 'entity.name.function.tplpre'
      2: 'name': 'punctuation.accessor.tplpre'
      3: 'name': 'entity.name.function.tplpre'
# local_functions functions (in current pattern):
  'local_functions':
    # name: local_functions.tplpre
    'match': "(local_functions|localFunctions)(\\.)(\\w+)"
    'captures':
      1: 'name': 'entity.name.function.tplpre'
      2: 'name': 'punctuation.accessor.tplpre'
      3: 'name': 'entity.name.function.tplpre'
# Grouping all functions:
  'all_functions':
    'patterns': [
      { 'include': '#discovery_functions' }
      { 'include': '#model_functions' }
      { 'include': '#model_SI_functions' }
      { 'include': '#model_rel_functions' }
      { 'include': '#log_functions' }
      { 'include': '#log_functions' }
      { 'include': '#text_functions' }
      { 'include': '#number_functions' }
      { 'include': '#regex_functions' }
      { 'include': '#xpath_functions' }
      { 'include': '#discovery_manipulation_functions' }
      { 'include': '#binary_functions' }
      { 'include': '#json_functions' }
      { 'include': '#related_functions' }
      { 'include': '#mail_functions' }
      { 'include': '#time_functions' }
      { 'include': '#inference_functions' }
      { 'include': '#ConversionFunctions' }
      { 'include': '#SearchFunctions' }
      { 'include': '#rdbms_functions' }
      { 'include': '#RDBMSFunctions' }
      { 'include': '#DiscoveryFunctions' }
      { 'include': '#common_functions' }
      { 'include': '#local_functions' }
    ]

# keyword.control.conditional
  # if, else, end if, for, end for
  'if_statement':
    'comment': 'New beginCaptures include here usual types of expressions'
    # 'begin': '(?!end if;|then)(if)(?:.+?)(?:then)'
    'begin': '(?!end if;|then)(\\bif)'
    'beginCaptures':
        1: 'name': 'keyword.control.conditional.tplpre'
    # 'contentName': 'meta.function.parameters.python'
    'end': '(then)'
    'endCaptures':
        1: 'name': 'keyword.control.conditional.tplpre'
    'patterns': [
        {
          'match': '(\\w+)\\s+(and)\\s+(\\w+)\\.(content)'
          'captures':
              1: 'name': 'variable.parameter.function.tplpre'
              2: 'name': 'keyword.control.conditional.tplpre'
              3: 'name': 'variable.parameter.function.tplpre'
              4: 'name': 'storage.type.class.tplpre'
        }
        { 'include': '#lines' }
        { 'include': '#all_controls' }
        { 'include': '#regex' }
    ]
  # 'then_statement':
  #   'comment': 'Its better to add here endCaptures as finish of if beginCaptures'
  #   'match': "\\bthen\\s+?"
  #   'name': 'keyword.control.conditional.tplpre'
  'elif_statement':
    'match': "\\belif\\s+?"
    'name': 'keyword.control.conditional.tplpre'
  'else_statement':
    'match': "\\belse\\s+?"
    'name': 'keyword.control.conditional.tplpre'
  'end_if_statement':
    'match': "\\bend\\sif;\\s+?"
    'name': 'keyword.control.conditional.tplpre'

  'for_statement':
    'comment': 'Not a good idea to add beginCaptures for if and for because it will fing just first occurence and then stop.'
    # 'begin': '(?!end if;|then)(if)(?:.+?)(?:then)'
    'begin': '(?!end for;|do)(\\bfor)'
    'beginCaptures':
        1: 'name': 'keyword.control.tplpre'
    # 'contentName': 'meta.function.parameters.python'
    'end': '(do)'
    'endCaptures':
        1: 'name': 'keyword.control.tplpre'
    'patterns': [
        { 'include': '#lines' }
        { 'include': '#all_controls' }
        { 'include': '#regex' }
    ]
  # 'for_statement':
  #   'match': "\\bend\\sfor;\\s+?"
  #   'name': 'keyword.control.tplpre'
  'end_for_statement':
    'match': "\\bend\\sfor;\\s+?"
    'name': 'keyword.control.tplpre'

  'keywords_all':
    'match': "\\b(size|in|aged|and|as|at|break|by|configuration|continue|created|default|desc|deleted|do|enumeration|exists|expand|explode|false|flags|from|has|in|is|locale|matches|modified|nodes|nodecount|none|not|on|or|order|out|overrides|processwith|relationship|removal|requires|search|show|step|stop|substring|subword|summary|tags|taxonomy|traverse|true|unconfirmed|where|with|void|has|substring)\\b"
    'name': 'support.type.tplpre'
  'keywords_cmd':
    'match': "\\b(unix_cmd|windows_cmd)"
    'captures':
        1: 'name': 'keyword.operator.tplpre'
  'keywords_cmd_indentify_trigger':
    'match': "\\b(unix_cmd|windows_cmd|cmd|args)"
    'captures':
        1: 'name': 'keyword.operator.tplpre'
  'if_ADDM_statement':
    'match': '#IFADDM'
    'name': 'keyword.control.conditional.tplpre'
  'else_ADDM_statement':
    'match': '#ELSE\\s+?'
    'name': 'keyword.control.conditional.tplpre'
  'end_if_ADDM_statement':
    'match': '#ENDIFADDM\\s+?'
    'name': 'keyword.control.conditional.tplpre'
# Grouping:
  'if_addm':
    'patterns': [
      { 'include': '#if_ADDM_statement' }
      { 'include': '#else_ADDM_statement' }
      { 'include': '#end_if_ADDM_statement' }
    ]
  'all_controls':
    'patterns': [
      {'include': '#if_statement'}
      {'include': '#elif_statement'}
      # {'include': '#then_statement'}
      {'include': '#else_statement'}
      {'include': '#end_if_statement'}
      {'include': '#for_statement'}
      {'include': '#end_for_statement'}
      {'include': '#if_addm'}
      {'include': '#keywords_all'}
      {'include': '#keywords_cmd'}
      {'include': '#all_keys'}
    ]
# DOC DOUBLE Q string section:
  # """
  # THIS BLOCK
  # """
  'doc_strings_block_doulbe_q':
    'comment': 'TRIGGER TYPE Working fine and DATE & TASK highlighted Adding SQL support via #lines'
    'begin': '(\\\"{3})'
    'beginCaptures':
      1: 'name': "comment.block.documentation.tplpre"
    'end': "(\\\"{3})"
    'contentName': "comment.block.documentation.tplpre"
    'endCaptures':
      1: 'name': "comment.block.documentation.tplpre"
     'patterns': [
        { 'include': "#sql_query" }
        {
          'name': "variable.parameter.tplpre"
          'match': "\\((QM\\d+)\\)"
          'captures':
            1: 'name': "variable.other.tplpre"
        }
        {
          'name': "variable.parameter.tplpre"
          'match': "\\((DRDC1-\\d+)\\)"
          'captures':
            1: 'name': "variable.other.tplpre"
        }
        {
          'name': "variable.parameter.tplpre"
          'match': "\\((TKU-\\d+)\\)"
          'captures':
            1: 'name': "variable.other.tplpre"
        }
        {
          'name': "variable.parameter.tplpre"
          'match': "\\((esc\\s+?\\d+)\\)"
          'captures':
            1: 'name': "variable.other.tplpre"
        }
        {
          # 'name': "variable.parameter.tplpre"
          'match': "(\\d{2,4}\\-\\d{2,4}\\-\\d{2,4}).*?(\\d{2,4}\\-\\d{2,4}\\-\\d{2,4})?"
          'captures':
            1: 'name': "variable.other.tplpre"
        }
    ]
  # '''
  # THIS BLOCK
  # '''
  'doc_strings_block_single_q':
    'comment': 'TRIGGER TYPE Working fine and DATE\TASK highlighted'
    'begin': "('{3})"
    'beginCaptures':
      1: 'name': "comment.block.documentation.tplpre"
    'end': "('{3})"
    'contentName': "comment.block.documentation.tplpre"
    'endCaptures':
      1: 'name': "comment.block.documentation.tplpre"
     'patterns': [
        {
          'name': "variable.parameter.tplpre"
          'match': "\\((QM\\d+)\\)"
          'captures':
            1: 'name': "variable.other.tplpre"
        }
        {
          'name': "variable.parameter.tplpre"
          'match': "\\((DRDC1-\\d+)\\)"
          'captures':
            1: 'name': "variable.other.tplpre"
        }
        {
          'name': "variable.parameter.tplpre"
          'match': "\\((TKU-\\d+)\\)"
          'captures':
            1: 'name': "variable.other.tplpre"
        }
        {
          'name': "variable.parameter.tplpre"
          'match': "\\((esc\\s+?\\d+)\\)"
          'captures':
            1: 'name': "variable.other.tplpre"
        }
        {
          # 'name': "variable.parameter.tplpre"
          'match': "(\\d{2,4}\\-\\d{2,4}\\-\\d{2,4}).*?(\\d{2,4}\\-\\d{2,4}\\-\\d{2,4})?"
          'captures':
            1: 'name': "variable.other.tplpre"
        }
    ]
  # ''' THIS STRING '''
  'doc_strings_single_simple':
      'comment': 'Adding SQL support via #lines'
      'name': "comment.block.documentation.tplpre"
      'match': "('{3}([^']+?)'{3})"
      'captures':
        1: 'name': "string.quoted.triple.tplpre"
        2: 'name': "string.quoted.triple.tplpre"
        3: 'name': "string.quoted.triple.tplpre"
# Grouping DOC STRINGS:
  'doc_strings':
    'patterns': [
      { 'include': '#doc_strings_block_doulbe_q' }
      { 'include': '#doc_strings_block_single_q' }
      { 'include': '#doc_strings_single_simple' }
    ]
#  define section
# Highlight define sections
  'define':
    'comment': 'Adding SQL support via #lines'
    'begin': '\\s+(define)\\s+(\\S+)\\((.*?)\\)(\\s\\S+\\s(.*))?'
    'beginCaptures':
      1: 'name': 'keyword.control.tplpre'
      2: 'name': 'entity.name.function.tplpre'
      3: 'name': 'variable.parameter.tplpre'
      4: 'name': 'constant.numeric.tplpre'
    'end': '\\s+(end\\sdefine;\\s+?$)'
    'endCaptures':
      1: 'name': 'keyword.control.tplpre'
    'patterns': [
        { 'include': "#doc_strings" }
        { 'include': "#all_functions" }
        { 'include': "#lines" }
        { 'include': '#sql_query' }
        { 'include': "#all_controls" }
        { 'include': "#if_addm" }
        { 'include': "#dev_keys" }
      ]
# Altermate define
  'alt_define':
    'comment': 'Adding SQL support via #lines'
    'begin': '\\s+(define)\\s+(\\S+)(\\s\\S+\\s(.*))?'
    'beginCaptures':
      1: 'name': 'keyword.control.tplpre'
      2: 'name': 'entity.name.function.tplpre'
      3: 'name': 'variable.parameter.tplpre'
    'end': '\\s+(end\\sdefine;)'
    'endCaptures':
      1: 'name': 'keyword.control.tplpre'
    'patterns': [
        { 'include': "#doc_strings" }
        { 'include': "#all_functions" }
        { 'include': "#lines" }
        { 'include': '#sql_query' }
        { 'include': "#all_controls" }
        { 'include': "#if_addm" }
        { 'include': "#dev_keys" }
      ]
# * Simple Identifiers *
  'simple_identifiers':
    'begin': '\\b(identify)\\s+(\\w+)\\s(\\d+(?:\\.\\d+)+)'
    'beginCaptures':
      1: 'name': "keyword.control.tplpre"
      2: 'name': "constant.numeric.tplpre"
    'end': '(end\\sidentify;)'
    'endCaptures':
      1: 'name': 'keyword.control.tplpre'
    'patterns': [
        { 'include': "#lines" }
        { 'include': "#keywords_cmd" }
        { 'include': "#keywords_all" }
        { 'include': "#regexes" }
        { 'include': "#keywords_cmd_indentify_trigger" }
        { 'include': "#if_addm" }
      ]
# DEVELOPMENT
# Some functions can be usefull or not. Add them here to be able to disable without errors.
# Attributes
  'keywords_attributes':
    'patterns': [
        { 'include': '#keywords_attrs' }
    ]
  'keywords_attrs':
    'match': "\\b(key|name|type|version|short_name|install_root|listening_ports|product_version|full_version)\\b"
    'captures':
       1: 'name': 'variable.parameter.tplpre'

  'traverse':
    'name': 'entity.name.function.model'
    'match': '\\#(?:(\\w+)(:|\\.))+(\\w+)'
    'captures':
      3: 'name': 'keyword.control.model'

  'dev_keys':
    'patterns': [
        { 'include': "#keywords_attributes" }
        { 'include': "#traverse" }
    ]
