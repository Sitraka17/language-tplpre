scope: "source.tplpre"
file_extensions: [
	"tplpre"
]
name: "tplpre"
contexts:
	RDBMSFunctions: [
		{
			captures:
				"1": "entity.name.function.tplpre"
				"2": "punctuation.accessor.tplpre"
				"3": "entity.name.function.tplpre"
			match: "(RDBMSFunctions)(\\.)(oracleOraFileParser|performRdbmsSisSearch|oracleNetServiceNameSearch|dsnRdbmsServers|parseJDBC)"
		}
	]
	discovery_manipulation_functions: [
		{
			captures:
				"1": "support.function.tplpre"
				"2": "punctuation.accessor.tplpre"
				"3": "support.constant.tplpre"
			match: "(discovery)(\\.)(process|children|descendents|parent|allProcesses|access)"
		}
	]
	triggers: [
		{
			captures:
				"1": "keyword.control.tplpre"
			patterns: [
				{
					meta_scope: "overwiev.complex.tplpre"
				}
				{
					captures:
						"1": "keyword.control.tplpre"
					pop: true
					match: "^\\s{4}(end\\striggers;)\\s+?$"
				}
				{
					include: "lines"
				}
				{
					include: "all_functions"
				}
				{
					include: "all_controls"
				}
				{
					include: "keywords_cmd_indentify_trigger"
				}
				{
					include: "if_addm"
				}
			]
			match: "^\\s{4}(triggers)\\s+?$"
		}
	]
	regex_2_lines: [
		{
			captures:
				"1": "keyword.control.tplpre"
			scope: "regex.tplpre"
			match: "(regex)"
		}
	]
	var_assign: [
		{
			scope: "keyword.operator.assignment.tplpre"
			match: "\\:\\="
		}
	]
	discovery_functions: [
		{
			captures:
				"1": "support.function.tplpre"
				"2": "punctuation.accessor.tplpre"
				"3": "support.constant.tplpre"
			patterns: [
				{
					captures:
						"1": "disabled.tplpre"
					pop: true
					match: "\\;"
				}
				{
					include: "lines"
				}
				{
					include: "all_controls"
				}
				{
					include: "regex"
				}
			]
			match: "(discovery)(\\.)(fileGet|fileInfo|getNames|listDirectory|listRegistry|registryKey|wmiQuery|wbemQuery|wbemEnumInstances|runCommand|snmpGet|snmpGetTable|restfulGet|restfulPost|vSphereFindObjects|vSphereTraverseToObjects|vSphereGetProperties|vSphereGetPropertyTable)"
		}
	]
	regexes: [
		{
			include: "regex_raw"
		}
		{
			include: "regex"
		}
		{
			include: "content_raw"
		}
	]
	if_ADDM_statement: [
		{
			scope: "keyword.control.conditional.tplpre"
			match: "#IFADDM"
		}
	]
	body: [
		{
			captures:
				"1": "keyword.control.tplpre"
			patterns: [
				{
					meta_scope: "body.complex.tplpre"
				}
				{
					captures:
						"1": "keyword.control.tplpre"
					pop: true
					match: "^\\s{4}(end\\sbody;)$"
				}
				{
					include: "dev_keys"
				}
				{
					include: "doc_strings"
				}
				{
					include: "lines"
				}
				{
					include: "all_functions"
				}
				{
					include: "all_controls"
				}
				{
					include: "if_addm"
				}
			]
			match: "^\\s{4}(body)$"
		}
	]
	tags_TKU: [
		{
			scope: "constant.other.tplpre"
			comment: "Tags TKU"
			match: "(TKU_\\d+_\\d+_\\d+)"
		}
	]
	comment_line: [
		{
			scope: "comment.line.tplpre"
			match: "//.*"
		}
	]
	log_functions: [
		{
			captures:
				"1": "storage.type.tplpre"
			match: "(log\\.(?:debug|info|warn|error|critical))"
		}
	]
	double_qouted_line: [
		{
			captures:
				"1": "keyword.control.tplpre"
				"2": "string.quoted.single.tplpre"
			comment: "There is one experimental regex now used. Old one is commented."
			match: "(\\\"((?:[^\\\"]|\\\\\\\\|\\\\\")*)\\\")"
		}
	]
	square_brackets_line_int: [
		{
			captures:
				"1": "constant.numeric.tplpre"
			match: "\\[(-?\\d+)\\]"
		}
	]
	mail_functions: [
		{
			captures:
				"1": "keyword.control.tplpre"
				"2": "punctuation.accessor.tplpre"
				"3": "variable.parameter.tplpre"
			match: "(mail)(\\.)(send)"
		}
	]
	all_keys: [
		{
			include: "var_assign"
		}
		{
			include: "equal"
		}
		{
			include: "less"
		}
		{
			include: "more"
		}
		{
			include: "more_equal"
		}
		{
			include: "less_equal"
		}
		{
			include: "plus"
		}
		{
			include: "decimal"
		}
		{
			include: "minus_decimal"
		}
		{
			include: "just_do"
		}
	]
	common_functions: [
		{
			captures:
				"1": "entity.name.function.tplpre"
				"2": "punctuation.accessor.tplpre"
				"3": "entity.name.function.tplpre"
			match: "(functions)(\\.)(validate_host_address_format|domain_lookup|identify_host_perform_search|identify_host_perform_search_in_scope|identify_host|identify_host_extended|related_sis_search\\b|related_sis_search_on_multiple_hosts|related_sis_search_on_multiple_hosts_extended|related_sis_search_extended|related_si_types_search|path_normalization|links_management|get_cleanedup_path|get_max_version|get_exe_cwd_path|sort_list|run_priv_cmd|has_process|isValidSerialNumber|convertToCharString|wmiFollowAssociations|checkForDecimal|convertToBytes|identify_host_with_uuid|locateCommands|find_server|checkCommandList)"
		}
	]
	rdbms_functions: [
		{
			captures:
				"1": "entity.name.function.tplpre"
				"2": "punctuation.accessor.tplpre"
				"3": "entity.name.function.tplpre"
			match: "(rdbms_functions)(\\.)(oracle_ora_file_parser|perform_rdbms_sis_search|related_rdbms_sis_search|related_rdbms_sis_search_extended|oracle_net_service_name_search|dsn_rdbms_servers|parseJDBC|jdbc_search|find_db_server)"
		}
	]
	json_functions: [
		{
			captures:
				"1": "keyword.control.tplpre"
				"2": "punctuation.accessor.tplpre"
				"3": "variable.parameter.tplpre"
			match: "(json)(\\.)(encode|decode)"
		}
	]
	model_functions: [
		{
			captures:
				"1": "entity.name.function.tplpre"
				"2": "support.function.tplpre"
				"3": "punctuation.accessor.tplpre"
				"4": "support.constant.tplpre"
			patterns: [
				{
					captures:
						"1": "disabled.tplpre"
					pop: true
					match: "\\;"
				}
				{
					include: "lines"
				}
				{
					include: "all_controls"
				}
				{
					include: "regex"
				}
			]
			match: "((model)(\\.)(addContainment|setContainment|destroy|withdraw|setRemovalGroup|anchorRemovalGroup|suppressRemovalGroup|host|hosts|findPackages|addDisplayAttribute|removeDisplayAttribute|kind))"
		}
	]
	constants: [
		{
			captures:
				"1": "keyword.control.tplpre"
			patterns: [
				{
					meta_scope: "constants.complex.tplpre"
				}
				{
					captures:
						"1": "keyword.control.tplpre"
					pop: true
					match: "\\b(end\\sconstants;)\\s+?$"
				}
				{
					include: "lines"
				}
				{
					include: "all_functions"
				}
				{
					include: "if_addm"
				}
			]
			match: "\\b(constants)\\s+?$"
		}
	]
	else_ADDM_statement: [
		{
			scope: "keyword.control.conditional.tplpre"
			match: "#ELSE\\s+?"
		}
	]
	else_statement: [
		{
			scope: "keyword.control.conditional.tplpre"
			match: "\\belse\\s+?"
		}
	]
	end_for_statement: [
		{
			scope: "keyword.control.tplpre"
			match: "\\bend\\sfor;\\s+?"
		}
	]
	keywords_cmd: [
		{
			captures:
				"1": "keyword.operator.tplpre"
			match: "\\b(unix_cmd|windows_cmd)"
		}
	]
	traverse: [
		{
			captures:
				"3": "keyword.control.model"
			scope: "entity.name.function.model"
			match: "\\#(?:(\\w+)(:|\\.))+(\\w+)"
		}
	]
	number_functions: [
		{
			captures:
				"1": "support.function.tplpre"
				"2": "punctuation.accessor.tplpre"
				"3": "support.constant.tplpre"
			match: "(number)(\\.)(toChar|toText|range)"
		}
	]
	decimal: [
		{
			scope: "constant.numeric.integer.tplpre"
			match: "\\s\\d+\\s"
		}
	]
	less_equal: [
		{
			scope: "keyword.operator.tplpre"
			match: "\\<\\="
		}
	]
	DiscoveryFunctions: [
		{
			captures:
				"1": "entity.name.function.tplpre"
				"2": "punctuation.accessor.tplpre"
				"3": "entity.name.function.tplpre"
			match: "(DiscoveryFunctions)(\\.)(pathNormalization|getCleanedupPath|getMaxVersion|getExeCwdPath|sortList|runActiveCommand|locateCommands|checkCommandList)"
		}
	]
	lines: [
		{
			include: "percent_line"
		}
		{
			include: "comment_TODO_line"
		}
		{
			include: "comment_line"
		}
		{
			include: "qouted_line"
		}
		{
			include: "double_qouted_line"
		}
		{
			include: "regexes"
		}
		{
			include: "square_brackets_line_word"
		}
		{
			include: "square_brackets_line_int"
		}
		{
			include: "all_keys"
		}
		{
			include: "brackets"
		}
	]
	metadata_2: [
		{
			captures:
				"1": "keyword.control.tplpre"
			patterns: [
				{
					captures:
						"1": "keyword.control.tplpre"
					pop: true
					match: "^(end\\smetadata;)\\s+?$"
				}
				{
					include: "comment_line"
				}
				{
					include: "lines"
				}
				{
					include: "if_addm"
				}
			]
			match: "^(metadata)\\s+?$"
		}
	]
	metadata: [
		{
			captures:
				"1": "keyword.control.tplpre"
			patterns: [
				{
					captures:
						"1": "keyword.control.tplpre"
					pop: true
					match: "^\\s{4}(end\\smetadata;)\\s+?$"
				}
				{
					include: "comment_line"
				}
				{
					include: "lines"
				}
				{
					include: "if_addm"
				}
			]
			match: "^\\s{4}(metadata)\\s+?$"
		}
	]
	dev_keys: [
		{
			include: "keywords_attributes"
		}
		{
			include: "traverse"
		}
	]
	all_controls: [
		{
			include: "if_statement"
		}
		{
			include: "elif_statement"
		}
		{
			include: "then_statement"
		}
		{
			include: "else_statement"
		}
		{
			include: "end_if_statement"
		}
		{
			include: "for_statement"
		}
		{
			include: "end_for_statement"
		}
		{
			include: "if_addm"
		}
		{
			include: "keywords_all"
		}
		{
			include: "keywords_cmd"
		}
		{
			include: "all_keys"
		}
	]
	then_statement: [
		{
			scope: "keyword.control.conditional.tplpre"
			match: "\\bthen\\s+?"
		}
	]
	model_SI_functions: [
		{
			captures:
				"1": "entity.name.function.tplpre"
				"2": "support.function.tplpre"
				"3": "punctuation.accessor.tplpre"
				"4": "support.constant.tplpre"
			patterns: [
				{
					captures:
						"1": "disabled.tplpre"
					pop: true
					match: "\\;"
				}
				{
					include: "lines"
				}
				{
					include: "all_controls"
				}
				{
					include: "regex"
				}
			]
			match: "((model)(\\.)(SoftwareInstance))"
		}
	]
	more: [
		{
			scope: "keyword.operator.tplpre"
			match: "\\>"
		}
	]
	keywords_attrs: [
		{
			captures:
				"1": "variable.parameter.tplpre"
			match: "\\b(key|name|type|version|short_name|install_root|listening_ports|product_version|full_version)\\b"
		}
	]
	keywords_all: [
		{
			scope: "support.type.tplpre"
			match: "\\b(aged|and|as|at|break|by|configuration|continue|created|default|desc|deleted|do|enumeration|exists|expand|explode|false|flags|from|has|in|is|locale|matches|modified|nodes|nodecount|none|not|on|or|order|out|overrides|processwith|relationship|removal|requires|search|show|step|stop|substring|subword|summary|tags|taxonomy|traverse|true|unconfirmed|where|with|void)\\b"
		}
	]
	doc_strings_single_simple: [
		{
			captures:
				"1": "string.quoted.triple.tplpre"
				"2": "string.quoted.triple.tplpre"
				"3": "string.quoted.triple.tplpre"
			scope: "comment.block.documentation.tplpre"
			match: "('{3}([^']+?)'{3})"
		}
	]
	ConversionFunctions: [
		{
			captures:
				"1": "entity.name.function.tplpre"
				"2": "punctuation.accessor.tplpre"
				"3": "entity.name.function.tplpre"
			match: "(ConversionFunctions)(\\.)(isValidSerialNumber|convertToCharString|convertToBytes)"
		}
	]
	qouted_line: [
		{
			captures:
				"1": "keyword.control.tplpre"
				"2": "string.quoted.single.tplpre"
			comment: "There is one experimental regex now used. Old one is commented."
			match: "(\\'((?:[^\\']|\\\\\\\\|\\\\')*)\\')"
		}
	]
	binary_functions: [
		{
			captures:
				"1": "support.function.tplpre"
				"2": "punctuation.accessor.tplpre"
				"3": "support.constant.tplpre"
			match: "(binary)(\\.)(toHexString|toIPv4|toIPv4z|toIPv6|toIPv6z|toMACAddress|toValue|toWWN)"
		}
	]
	if_statement: [
		{
			scope: "keyword.control.conditional.tplpre"
			match: "(?:[^(end)])(if)(?:[^;\\w])"
		}
	]
	related_functions: [
		{
			captures:
				"1": "support.function.tplpre"
				"2": "punctuation.accessor.tplpre"
				"3": "support.constant.tplpre"
			match: "(related)(\\.)(detailContainer|host\\b|hostingNode)"
		}
	]
	regex_raw: [
		{
			captures:
				"1": "keyword.control.tplpre"
				"3": "variable.parameter.tplpre"
			match: "\\b(raw)\\s+('|\")(\\\\\\d+)('|\")"
		}
	]
	model_rel_functions: [
		{
			captures:
				"1": "entity.name.function.tplpre"
				"2": "support.function.tplpre"
				"3": "punctuation.accessor.tplpre"
				"4": "support.constant.tplpre"
			patterns: [
				{
					captures:
						"1": "disabled.tplpre"
					pop: true
					match: "\\;"
				}
				{
					include: "lines"
				}
				{
					include: "all_controls"
				}
				{
					include: "regex"
				}
			]
			match: "((model)(\\.)(rel|uniquerel)(\\.)(Communication|Containment|Dependency|Detail|HostContainment|HostedFile|HostedSoftware|Management|RelatedFile|SoftwareService|SoftwareContainment|StorageUse))"
		}
	]
	tags: [
		{
			scope: "constant.other.tplpre"
			comment: "Tags"
			match: "\\s+(tags)\\s+(.*?);"
		}
	]
	local_functions: [
		{
			captures:
				"1": "entity.name.function.tplpre"
				"2": "punctuation.accessor.tplpre"
				"3": "entity.name.function.tplpre"
			match: "(local_functions|localFunctions)(\\.)(\\w+)"
		}
	]
	regex_functions: [
		{
			captures:
				"1": "keyword.control.tplpre"
				"2": "punctuation.accessor.tplpre"
				"3": "variable.parameter.tplpre"
			match: "(regex)(\\.)(extract|extractAll)"
		}
	]
	minus_decimal: [
		{
			scope: "constant.numeric.integer.tplpre"
			match: "\\s\\-\\d+\\s"
		}
	]
	comment_TODO_line: [
		{
			captures:
				"1": "comment.line.tplpre"
				"2": "keyword.control.tplpre"
			patterns: [
				{
					captures:
						"1": "variable.parameter.tplpre"
					pop: true
					match: "(.*)"
				}
			]
			comment: "variable.parameter.tplpre"
			match: "(//)\\s?(TODO\\:)"
		}
	]
	xpath_functions: [
		{
			captures:
				"1": "keyword.control.tplpre"
				"2": "punctuation.accessor.tplpre"
				"3": "variable.parameter.tplpre"
			match: "(xpath)(\\.)(evaluate|openDocument|closeDocument)"
		}
	]
	content_raw: [
		{
			captures:
				"1": "keyword.control.tplpre"
			match: "\\s\\b(raw)\\s+"
		}
	]
	more_equal: [
		{
			scope: "keyword.operator.tplpre"
			match: "\\>\\="
		}
	]
	square_brackets_line_word: [
		{
			captures:
				"1": "variable.parameter.tplpre"
			match: "\\[(\\w+[^\\d+])\\]"
		}
	]
	inference_functions: [
		{
			captures:
				"1": "support.function.tplpre"
				"2": "punctuation.accessor.tplpre"
				"3": "support.constant.tplpre"
			match: "(inference)(\\.)(associate|contributor|primary|relation|withdrawal|destruction)"
		}
	]
	alt_define: [
		{
			captures:
				"1": "keyword.control.tplpre"
				"2": "entity.name.function.tplpre"
				"3": "variable.parameter.tplpre"
			patterns: [
				{
					meta_scope: "alt_define.complex.tplpre"
				}
				{
					captures:
						"1": "keyword.control.tplpre"
					pop: true
					match: "\\s+(end\\sdefine;)"
				}
				{
					include: "doc_strings"
				}
				{
					include: "all_functions"
				}
				{
					include: "lines"
				}
				{
					include: "all_controls"
				}
				{
					include: "if_addm"
				}
				{
					include: "dev_keys"
				}
			]
			match: "\\s+(define)\\s+(\\S+)(\\s\\S+\\s(.*))?"
		}
	]
	just_do: [
		{
			captures:
				"1": "keyword.operator.tplpre"
			scope: "punctuation.accessor.tplpre"
			match: "(\\.)"
		}
	]
	keywords_cmd_indentify_trigger: [
		{
			captures:
				"1": "keyword.operator.tplpre"
			match: "\\b(unix_cmd|windows_cmd|cmd|args)"
		}
	]
	less: [
		{
			scope: "keyword.operator.tplpre"
			match: "\\<"
		}
	]
	removal: [
		{
			captures:
				"1": "keyword.control.tplpre"
			patterns: [
				{
					meta_scope: "constants.complex.tplpre"
				}
				{
					captures:
						"1": "keyword.control.tplpre"
					pop: true
					match: "^\\s{4}(end\\sremoval;)"
				}
				{
					include: "lines"
				}
				{
					include: "all_functions"
				}
				{
					include: "all_controls"
				}
				{
					include: "if_addm"
				}
			]
			match: "^\\s{4}(removal)"
		}
	]
	end_if_statement: [
		{
			scope: "keyword.control.conditional.tplpre"
			match: "\\bend\\sif;\\s+?"
		}
	]
	for_statement: [
		{
			scope: "keyword.control.tplpre"
			match: "\\bfor\\s"
		}
	]
	time_functions: [
		{
			captures:
				"1": "keyword.control.tplpre"
				"2": "punctuation.accessor.tplpre"
				"3": "variable.parameter.tplpre"
			match: "(time)(\\.)(current|delta|parseLocal|parseUTC|formatLocal|formatUTC|toTicks|fromTicks)"
		}
	]
	keywords_attributes: [
		{
			include: "keywords_attrs"
		}
	]
	single_q: [
		{
			scope: "comment.tplpre"
			match: "(\\'\\'){1}"
		}
	]
	overwiev: [
		{
			captures:
				"1": "keyword.control.tplpre"
			patterns: [
				{
					meta_scope: "overwiev.complex.tplpre"
				}
				{
					captures:
						"1": "keyword.control.tplpre"
					pop: true
					match: "^\\s{4}(end\\soverview;)\\s+?$"
				}
				{
					include: "comment_line"
				}
				{
					include: "tags_TKU"
				}
				{
					include: "keywords_all"
				}
				{
					include: "if_addm"
				}
			]
			match: "^\\s{4}(overview)\\s+?$"
		}
	]
	if_addm: [
		{
			include: "if_ADDM_statement"
		}
		{
			include: "else_ADDM_statement"
		}
		{
			include: "end_if_ADDM_statement"
		}
	]
	define: [
		{
			captures:
				"1": "keyword.control.tplpre"
				"2": "entity.name.function.tplpre"
				"3": "variable.parameter.tplpre"
				"4": "constant.numeric.tplpre"
			patterns: [
				{
					meta_scope: "define.complex.tplpre"
				}
				{
					captures:
						"1": "keyword.control.tplpre"
					pop: true
					match: "\\s+(end\\sdefine;\\s+?$)"
				}
				{
					include: "doc_strings"
				}
				{
					include: "all_functions"
				}
				{
					include: "lines"
				}
				{
					include: "all_controls"
				}
				{
					include: "if_addm"
				}
				{
					include: "dev_keys"
				}
			]
			match: "\\s+(define)\\s+(\\S+)\\((.*?)\\)(\\s\\S+\\s(.*))?"
		}
	]
	simple_identifiers: [
		{
			captures:
				"1": "keyword.control.tplpre"
				"3": "constant.numeric.tplpre"
			patterns: [
				{
					captures:
						"1": "keyword.control.tplpre"
					pop: true
					match: "(end\\sidentify;)"
				}
				{
					include: "lines"
				}
				{
					include: "keywords_cmd"
				}
				{
					include: "keywords_all"
				}
				{
					include: "regexes"
				}
				{
					include: "keywords_cmd_indentify_trigger"
				}
				{
					include: "if_addm"
				}
			]
			match: "\\b(identify)\\s+(\\w+)\\s(\\d+(?:\\.\\d+)+)"
		}
	]
	doc_strings: [
		{
			include: "doc_strings_block_doulbe_q"
		}
		{
			include: "doc_strings_block_single_q"
		}
		{
			include: "doc_strings_single_simple"
		}
	]
	plus: [
		{
			scope: "keyword.operator.assignment.tplpre"
			match: "\\+"
		}
	]
	regex: [
		{
			captures:
				"1": "keyword.control.tplpre"
			scope: "regex.tplpre"
			match: "\\b(regex)\\s+"
		}
	]
	doc_strings_block_doulbe_q: [
		{
			captures:
				"1": "comment.block.documentation.tplpre"
			patterns: [
				{
					captures:
						"1": "comment.block.documentation.tplpre"
					pop: true
					match: "(\\\"{3})"
				}
				{
					include: "main"
				}
				{
					captures:
						"1": "variable.other.tplpre"
						"2": "comment.block.documentation.tplpre"
					scope: "variable.parameter.tplpre"
					match: "(\\d{2,4}\\-\\d{2,4}\\-\\d{2,4})(.*)?(\\d{2,4}\\-\\d{2,4}\\-\\d{2,4})?"
				}
				{
					include: "main"
				}
				{
					scope: "comment.block.documentation.tplpre"
					match: "."
				}
			]
			match: "(\\\"{3})"
		}
	]
	all_functions: [
		{
			include: "discovery_functions"
		}
		{
			include: "model_functions"
		}
		{
			include: "model_SI_functions"
		}
		{
			include: "model_rel_functions"
		}
		{
			include: "log_functions"
		}
		{
			include: "log_functions"
		}
		{
			include: "text_functions"
		}
		{
			include: "number_functions"
		}
		{
			include: "regex_functions"
		}
		{
			include: "xpath_functions"
		}
		{
			include: "discovery_manipulation_functions"
		}
		{
			include: "binary_functions"
		}
		{
			include: "json_functions"
		}
		{
			include: "related_functions"
		}
		{
			include: "mail_functions"
		}
		{
			include: "time_functions"
		}
		{
			include: "inference_functions"
		}
		{
			include: "ConversionFunctions"
		}
		{
			include: "SearchFunctions"
		}
		{
			include: "rdbms_functions"
		}
		{
			include: "RDBMSFunctions"
		}
		{
			include: "DiscoveryFunctions"
		}
		{
			include: "common_functions"
		}
		{
			include: "local_functions"
		}
	]
	double_q: [
		{
			scope: "comment.tplpre"
			match: "(\\\"\\\"){1}"
		}
	]
	equal: [
		{
			scope: "keyword.operator.assignment.tplpre"
			match: "\\="
		}
	]
	SearchFunctions: [
		{
			captures:
				"1": "entity.name.function.tplpre"
				"2": "punctuation.accessor.tplpre"
				"3": "entity.name.function.tplpre"
			match: "(SearchFunctions)(\\.)(getNodeIp|getHostingNodes|getSoftwareNodes|getSI|identifyHostWithUuid|relatedSisSearchOnMultipleHosts)"
		}
	]
	end_if_ADDM_statement: [
		{
			scope: "keyword.control.conditional.tplpre"
			match: "#ENDIFADDM\\s+?"
		}
	]
	percent_line: [
		{
			captures:
				"1": "keyword.control.tplpre"
				"2": "string.quoted.single.tplpre"
			scope: "keyword.control.tplpre"
			comment: "There is one experimental regex now used. Old one is commented."
			match: "(\\%((?:[^\\%]|\\\\\\\\|\\\\%)*)\\%)"
		}
	]
	main: [
		{
			include: "doc_strings"
		}
		{
			include: "comment_TODO_line"
		}
		{
			include: "comment_line"
		}
		{
			include: "metadata_2"
		}
		{
			include: "overwiev"
		}
		{
			include: "simple_identifiers"
		}
		{
			include: "if_addm"
		}
		{
			captures:
				"1": "constant.character.tplpre"
				"2": "constant.character.tplpre"
			match: "tpl\\s+?(\\$\\$TPLVERSION\\$\\$|\\d+\\.\\d+)\\s+?module\\s(.*);"
		}
		{
			captures:
				"1": "entity.name.function.tplpre"
				"2": "storage.type.tplpre"
				"3": "variable.parameter.tplpre"
				"4": "entity.name.function.tplpre"
				"5": "constant.numeric.tplpre"
			match: "from\\s(\\w+)(?:\\.(\\w+))?(?:\\.(\\w+))?\\simport\\s(\\S+)\\s(\\d+(?:\\.\\d+)+);"
		}
		{
			captures:
				"1": "keyword.control.tplpre"
				"2": "entity.name.function.tplpre"
				"3": "constant.numeric.tplpre"
			patterns: [
				{
					captures:
						"1": "keyword.control.tplpre"
					pop: true
					match: "^(end\\sconfiguration;)"
				}
				{
					include: "comment_line"
				}
				{
					include: "doc_strings"
				}
				{
					include: "lines"
				}
				{
					include: "if_addm"
				}
			]
			match: "^(configuration)\\s(\\S+)\\s(\\d+\\.\\d+)"
		}
		{
			captures:
				"1": "keyword.control.tplpre"
				"2": "entity.name.function"
				"3": "constant.numeric.tplpre"
				"4": "comment.block.documentation.tplpre"
			patterns: [
				{
					captures:
						"1": "keyword.control.tplpre"
					pop: true
					match: "^(end\\stable;)"
				}
				{
					include: "comment_line"
				}
				{
					include: "main"
				}
				{
					scope: "comment.block.documentation.tplpre"
					match: "."
				}
			]
			match: "^(table)\\s(\\S+)\\s(\\d+(?:\\.\\d+)+)"
		}
		{
			captures:
				"1": "keyword.control.tplpre"
				"2": "entity.name.function.tplpre"
				"3": "constant.numeric.tplpre"
			patterns: [
				{
					captures:
						"1": "keyword.control.tplpre"
					pop: true
					match: "^(end\\sdefinitions;)"
				}
				{
					include: "comment_line"
				}
				{
					include: "doc_strings"
				}
				{
					include: "define"
				}
				{
					include: "alt_define"
				}
				{
					include: "lines"
				}
				{
					include: "if_addm"
				}
			]
			match: "^(definitions)\\s(\\S+)\\s(\\d+(?:\\.\\d+)+)"
		}
		{
			captures:
				"1": "keyword.control.tplpre"
				"3": "constant.numeric.tplpre"
			patterns: [
				{
					captures:
						"1": "keyword.control.tplpre"
					pop: true
					match: "\\b(end\\spattern;)"
				}
				{
					include: "comment_TODO_line"
				}
				{
					include: "comment_line"
				}
				{
					include: "doc_strings"
				}
				{
					include: "metadata"
				}
				{
					include: "overwiev"
				}
				{
					include: "constants"
				}
				{
					include: "triggers"
				}
				{
					include: "removal"
				}
				{
					include: "body"
				}
				{
					include: "if_addm"
				}
			]
			match: "^\\b(pattern)\\s+(\\w+)\\s(\\d+(?:\\.\\d+)+)\\s+$"
		}
	]
	elif_statement: [
		{
			scope: "keyword.control.conditional.tplpre"
			match: "\\belif\\s+?"
		}
	]
	text_functions: [
		{
			captures:
				"1": "support.function.tplpre"
				"2": "punctuation.accessor.tplpre"
				"3": "support.constant.tplpre"
			match: "(text)(\\.)(lower|upper|toNumber|replace|join|split|strip|leftStrip|rightStrip|hash|ordinal)"
		}
	]
	doc_strings_block_single_q: [
		{
			captures:
				"1": "comment.block.documentation.tplpre"
			patterns: [
				{
					captures:
						"1": "comment.block.documentation.tplpre"
					pop: true
					match: "('{3})"
				}
				{
					include: "main"
				}
				{
					captures:
						"1": "variable.other.tplpre"
						"2": "comment.block.documentation.tplpre"
					scope: "variable.parameter.tplpre"
					match: "(\\d{2,4}\\-\\d{2,4}\\-\\d{2,4})(.*)?(\\d{2,4}\\-\\d{2,4}\\-\\d{2,4})?"
				}
				{
					include: "main"
				}
				{
					scope: "comment.block.documentation.tplpre"
					match: "."
				}
			]
			match: "('{3})"
		}
	]
